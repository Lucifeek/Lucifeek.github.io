{"meta":{"title":"庸人的自怨自艾","subtitle":"","description":"","author":"jiangwei","url":"http://https://lucifeek.github.io","root":"//lucifeek.github.io/"},"pages":[],"posts":[{"title":"Enum","slug":"Enum","date":"2022-06-02T04:14:38.000Z","updated":"2022-06-02T06:39:34.673Z","comments":true,"path":"2022/06/02/Enum/","link":"","permalink":"http://https//lucifeek.github.io/2022/06/02/Enum/","excerpt":"","text":"Java枚举教程JDK中定义的Enun(源码jdk 1.8)1234567891011public abstract class Enum&lt;E extends Enum&lt;E&gt;&gt; implements Comparable&lt;E&gt;, Serializable &#123; // 枚举的名字 private final String name; // 枚举声明的顺序 private final int ordinal; // 枚举的比较方法 public final boolean equals(Object other) &#123; return this==other; &#125;&#125; 对于枚举来讲，判断相等的方式可以直接用 == 声明一个枚举类 Java中通过Enum关键字来声明一个枚举类，并定义枚举 12345678910111213141516171819public enum DayOfWeek &#123; SUNDAY(&quot;Sunday&quot;, &quot;weekend&quot;), MONDAY(&quot;Monday&quot;, &quot;weekday&quot;), TUESDAY(&quot;Tuesday&quot;, &quot;weekday&quot;), WEDNESDAY(&quot;Wednesday&quot;, &quot;weekday&quot;), THURSDAY(&quot;Thursday&quot;, &quot;weekday&quot;), FRIDAY(&quot;Friday&quot;, &quot;weekday&quot;), SATURDAY(&quot;Saturday&quot;, &quot;weekend&quot;) ; DayOfWeek(String desc, String type) &#123; this.desc = desc; this.type = type; &#125; private String desc; private String type;&#125; 枚举类的使用 Java中可以通过valueOf()来将一个字符串转换为对应名字的枚举值 123456789// Enum 类中 valueof 方法的实现 public static &lt;T extends Enum&lt;T&gt;&gt; T valueOf(Class&lt;T&gt; enumType, String name) &#123; T result = enumType.enumConstantDirectory().get(name); if (result != null) return result; if (name == null) throw new NullPointerException(&quot;Name is null&quot;); throw new IllegalArgumentException(&quot;No enum constant &quot; + enumType.getCanonicalName() + &quot;.&quot; + name); &#125; Usage: DayOfWeek.valueOf(&quot;MONDAY&quot;); 通过values()对全部声明的枚举进行遍历，方法返回一个声明全部枚举值的数组 Usage: DayOfWeek.values(); 通过实现对应接口&#x2F;抽象方法，定义不同枚举在同一方法下的不同行为 1234// 定义接口public interface Action &#123; void action();&#125; 123456789101112131415161718192021222324252627282930313233343536public enum DayOfWeek implements Action &#123; WEEKEND(&quot;Weekend&quot;) &#123; @override public void action() &#123; System.out.println(&quot;have a break&quot;); &#125; @override public void do() &#123; return &quot;have a break&quot;; &#125; &#125;, WEEKDAY(&quot;weekday&quot;) &#123; // 继承的方法 @override public void action() &#123; System.out.println(&quot;go to work today&quot;); &#125; // 实现的抽象类 @override public String do() &#123; return &quot;go to work today&quot;; &#125; &#125; ; DayOfWeek(String desc) &#123; this.desc = desc; &#125; private String desc; // 枚举内定义的抽象方法，由具体的枚举来实现 public abstract String do();&#125;","categories":[{"name":"Programming Language","slug":"Programming-Language","permalink":"http://https//lucifeek.github.io/categories/Programming-Language/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://https//lucifeek.github.io/tags/Java/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-05-30T06:11:13.178Z","updated":"2022-05-30T06:11:13.178Z","comments":true,"path":"2022/05/30/hello-world/","link":"","permalink":"http://https//lucifeek.github.io/2022/05/30/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"Programming Language","slug":"Programming-Language","permalink":"http://https//lucifeek.github.io/categories/Programming-Language/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://https//lucifeek.github.io/tags/Java/"}]}